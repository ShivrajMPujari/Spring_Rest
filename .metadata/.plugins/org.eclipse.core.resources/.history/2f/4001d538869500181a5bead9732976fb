package com.bridgeIt.restDemo.config;

import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

import com.bridgeIt.restDemo.model.Receiver;

@EnableWebMvc
@ComponentScan("com.bridgeIt.restDemo")
@Configuration
public class SpringConfig extends WebMvcConfigurerAdapter {

/*	@Bean
	public InternalResourceViewResolver internalViewResolver () {
		
		  InternalResourceViewResolver resolver = new InternalResourceViewResolver();
		  resolver.setViewClass(JstlView.class);
		  resolver.setPrefix("/WEB-INF/views/");
		  resolver.setSuffix(".jsp");
		
		  return resolver;
	}*/
	
	
	static final String queueName="myQueue";
	static final String topicName="myTopic";
	
	 @Autowired
	 private ConnectionFactory rabbitConnectionFactory;
	
	@Bean
	public Queue queue() {
		
		
	 return new Queue(queueName, true);
	}
	
	@Bean
	TopicExchange topicExchange() {
		
		return new TopicExchange(topicName);
	}
	
	@Bean
	Binding binding (Queue queue , TopicExchange topicExchange) {
		
		
		return BindingBuilder.bind(queue).to(topicExchange).with("myBindingKey");
	}
	
	
	  @Bean
	    MessageListenerAdapter listenerAdapter(Receiver receiver) {
	        return new MessageListenerAdapter(receiver, "receiveMessage");
	    }
	
	@Bean
	RabbitTemplate getTemplate () {
		
		return new RabbitTemplate();
	}
	
	  
	  
	@Override
	public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
		
		configurer.enable();
	}
	
	
}
